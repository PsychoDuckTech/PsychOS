name: PlatformIO CI

on: [push, pull_request]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set Version
      id: version
      run: |
        echo "version=0.1.3-alpha" >> "$GITHUB_OUTPUT"
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install platformio
    
    - name: Cache PlatformIO
      uses: actions/cache@v3
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-platformio-${{ hashFiles('**/platformio.ini') }}
        restore-keys: |
          ${{ runner.os }}-platformio-
    
    - name: Run PlatformIO Compiler
      run: platformio run
      working-directory: source

    - name: Find Firmware
      id: find_firmware
      run: |
        FIRMWARE_PATH=$(find source/.pio -name "*.bin" | head -n 1)
        if [ -z "$FIRMWARE_PATH"; then
          echo "No firmware file found!"
          exit 1
        fi
        echo "firmware_path=$FIRMWARE_PATH" >> "$GITHUB_OUTPUT"
        echo "Firmware found at: $FIRMWARE_PATH"
      
    - name: Generate Release Notes
      id: release_notes
      run: |
        cat << EOF > RELEASE.md

        ## üéâ First Alpha Release

        ### Key Features
        - USB HID Communication Bridge
        - Volume Control System
          - Smooth increment/decrement with direction lock
          - Configurable polling rate (1000Hz)
          - Mute function via encoder press
        - FreeRTOS Task Management

        ### üì• Installation
        Download \`firmware.bin\` and flash using:
        \`\`\`bash
        esptool.py --chip esp32s3 --port COM[X] write_flash 0x0 firmware.bin
        \`\`\`

        ### ‚ö†Ô∏è Known Issues
        - Matrix scanning still in development
        - Configuration system not yet implemented

        ### üîú Next Steps
        - Complete matrix scanning implementation
        - Add configuration interface
        - Implement layer system
        EOF

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.version }}
        release_name: PsychOS v${{ steps.version.outputs.version }}
        body_path: RELEASE.md
        draft: false
        prerelease: true

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.find_firmware.outputs.firmware_path }}
        asset_name: firmware.bin
        asset_content_type: application/octet-stream
