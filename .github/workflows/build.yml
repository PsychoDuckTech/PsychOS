name: üöÄ PsychOS CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'source/**'
      - 'platformio.ini'
  pull_request:
    paths:
      - 'source/**'
      - 'platformio.ini'

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Extract Version from main.cpp
      id: extract_version
      run: |
        VERSION=$(grep -oP '(?<=#define VERSION ")([^"]+)' source/src/main.cpp)
        if [ -z "$VERSION" ]; then
          echo "::error::Version not found in main.cpp!"
          exit 1
        fi
        echo "version=$VERSION" >> "$GITHUB_OUTPUT"
        echo "Extracted version: $VERSION"

    - name: Validate Tag Availability
      run: |
        if git rev-parse "v${{ steps.extract_version.outputs.version }}" >/dev/null 2>&1; then
          echo "::error::Tag v${{ steps.extract_version.outputs.version }} already exists!"
          exit 1
        fi

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install platformio

    - name: Cache PlatformIO
      uses: actions/cache@v3
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-platformio-${{ hashFiles('source/platformio.ini') }}
        restore-keys: |
          ${{ runner.os }}-platformio-

    - name: Build Firmware
      run: platformio run
      working-directory: source
      env:
        PLATFORMIO_FORCE_COLOR: true

    - name: Locate Firmware
      id: find_firmware
      run: |
        set -e
        FIRMWARE_PATH=$(find source/.pio/build -name 'firmware*.bin' -not -name '*bootloader*' -type f -print -quit)
        if [ -z "$FIRMWARE_PATH" ]; then
          echo "::error::Firmware binary not found in build artifacts!"
          exit 1
        fi
        FIRMWARE_NAME="psychos-${{ steps.extract_version.outputs.version }}.bin"
        mv "$FIRMWARE_PATH" "$FIRMWARE_NAME"
        echo "firmware_path=$FIRMWARE_NAME" >> "$GITHUB_OUTPUT"
        echo "firmware_name=$FIRMWARE_NAME" >> "$GITHUB_OUTPUT"
        echo "Found firmware: $FIRMWARE_NAME"

    - name: Generate Release Notes
      id: release_notes
      run: |
        PREV_TAG=$(git tag --sort=-version:refname | head -n 1 || echo "")
        if [ -z "$PREV_TAG" ]; then
          COMMITS=$(git log --oneline | sed 's/^/- /')
        else
          COMMITS=$(git log $PREV_TAG..HEAD --oneline | sed 's/^/- /')
        fi

        cat << EOF > RELEASE.md
        ## üéâ PsychOS Alpha Release v${{ steps.extract_version.outputs.version }}

        ### ‚ú® Changes
        \$COMMITS

        ### üì• Installation

        #### Prerequisites

        <details>
        <summary>Install esptool on Windows</summary>

        1. Install Python from [python.org](https://www.python.org/downloads/).
        2. Open Command Prompt and run:
           \`\`\`bash
           pip install esptool
           \`\`\`
        </details>

        <details>
        <summary>Install esptool on Linux</summary>

        1. Open Terminal and run:
           \`\`\`bash
           sudo apt-get install python3-pip
           pip3 install esptool
           \`\`\`
        </details>

        #### Flashing the Firmware

        Download \`${{ steps.find_firmware.outputs.firmware_name }}\` and flash using:

        ##### For Windows:
        \`\`\`bash
        python -m esptool --chip esp32s3 --port COM[X] write_flash 0x0 ${{ steps.find_firmware.outputs.firmware_name }}
        \`\`\`

        ##### For Linux/macOS:
        \`\`\`bash
        esptool.py --chip esp32s3 --port /dev/ttyUSB0 write_flash 0x0 ${{ steps.find_firmware.outputs.firmware_name }}
        \`\`\`

        ### ‚ö†Ô∏è Known Issues
        - Matrix scanning in development
        - Configuration system pending

        ### üõ†Ô∏è Next Steps
        - Complete matrix scanning implementation
        - Add configuration interface
        - Implement layer system
        EOF

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.extract_version.outputs.version }}
        name: PsychOS v${{ steps.extract_version.outputs.version }}
        body_path: RELEASE.md
        prerelease: true
        files: |
          ${{ steps.find_firmware.outputs.firmware_path }}