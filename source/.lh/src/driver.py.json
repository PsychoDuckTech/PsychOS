{
    "sourceFile": "src/driver.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1736973983020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1736974156076,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,22 @@\n+import serial\n+\n+# Replace 'COM_PORT' with your actual serial port\n+ser = serial.Serial('COM_PORT', 115200)\n+\n+def send_data(caps_lock_status, hour, minute):\n+    data = f\"{caps_lock_status},{hour},{minute}\\n\"\n+    ser.write(data.encode())\n+    print(f\"Sent: {data.strip()}\")\n+\n+# Example usage:\n+# caps_lock_status = True or False\n+# hour = 0 to 23\n+# minute = 0 to 59\n+caps_lock_status = True  # Replace with your logic\n+hour = 12  # Replace with your logic\n+minute = 34  # Replace with your logic\n+\n+send_data(caps_lock_status, hour, minute)\n+\n+# Close the serial connection\n+ser.close()\n"
                },
                {
                    "date": 1736974237575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import serial\n \n-# Replace 'COM_PORT' with your actual serial port\n+# Replace 'COM_PORT' with your actual USB port\n ser = serial.Serial('COM_PORT', 115200)\n \n def send_data(caps_lock_status, hour, minute):\n     data = f\"{caps_lock_status},{hour},{minute}\\n\"\n@@ -19,38 +19,4 @@\n send_data(caps_lock_status, hour, minute)\n \n # Close the serial connection\n ser.close()\n-import usb_hid\n-from adafruit_hid.keyboard import Keyboard\n-from adafruit_hid.keyboard_layout_us import KeyboardLayoutUS\n-import board\n-import busio\n-import time\n-\n-# Initialize USB HID components\n-i2c = busio.I2C(board.SCL, board.SDA)\n-kbd = Keyboard(usb_hid.devices)\n-layout = KeyboardLayoutUS(kbd)\n-\n-def get_caps_lock_status():\n-    # Keyboard LED states\n-    return kbd.get_leds()\n-\n-def get_current_time():\n-    return time.strftime(\"%Y-%m-%d %H:%M:%S\")\n-\n-while True:\n-    caps_lock_status = get_caps_lock_status()\n-    is_caps_lock_on = bool(caps_lock_status & 0b001)  # Mask with 0b001 to check Caps Lock state\n-    \n-    # Get current time\n-    current_time = get_current_time()\n-    print(f\"Caps Lock: {is_caps_lock_on}, Time: {current_time}\")\n-\n-    # Send Caps Lock status and current time\n-    if is_caps_lock_on:\n-        kbd.press(KEY_CAPS_LOCK)\n-    else:\n-        kbd.release(KEY_CAPS_LOCK)\n-\n-    time.sleep(1)\n"
                },
                {
                    "date": 1736974529933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import serial\n \n # Replace 'COM_PORT' with your actual USB port\n-ser = serial.Serial('COM_PORT', 115200)\n+ser = serial.Serial('ttyACM0', 115200)\n \n def send_data(caps_lock_status, hour, minute):\n     data = f\"{caps_lock_status},{hour},{minute}\\n\"\n     ser.write(data.encode())\n"
                },
                {
                    "date": 1736974589367,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,30 @@\n+import serial\n+\n+# Find available USB ports\n+# List available ports\n+# Replace 'ttyUSB0' with the actual port if necessary\n+ports = [f'/dev/{port}' for port in ['ttyUSB0', 'ttyUSB1', 'ttyACM0'] if os.path.exists(f'/dev/{port}')]\n+\n+if ports:\n+    ser = serial.Serial(ports[0], 115200)\n+    print(f\"Connected to {ports[0]}\")\n+else:\n+    print(\"No USB device found\")\n+\n+def send_data(caps_lock_status, hour, minute):\n+    data = f\"{caps_lock_status},{hour},{minute}\\n\"\n+    ser.write(data.encode())\n+    print(f\"Sent: {data.strip()}\")\n+\n+# Example usage:\n+# caps_lock_status = True or False\n+# hour = 0 to 23\n+# minute = 0 to 59\n+caps_lock_status = True  # Replace with your logic\n+hour = 12  # Replace with your logic\n+minute = 34  # Replace with your logic\n+\n+send_data(caps_lock_status, hour, minute)\n+\n+# Close the serial connection\n+ser.close()\n"
                },
                {
                    "date": 1736974600601,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,31 @@\n+import serial\n+import os\n+\n+# Find available USB ports\n+# List available ports\n+# Replace 'ttyUSB0' with the actual port if necessary\n+ports = [f'/dev/{port}' for port in ['ttyUSB0', 'ttyUSB1', 'ttyACM0'] if os.path.exists(f'/dev/{port}')]\n+\n+if ports:\n+    ser = serial.Serial(ports[0], 115200)\n+    print(f\"Connected to {ports[0]}\")\n+else:\n+    print(\"No USB device found\")\n+\n+def send_data(caps_lock_status, hour, minute):\n+    data = f\"{caps_lock_status},{hour},{minute}\\n\"\n+    ser.write(data.encode())\n+    print(f\"Sent: {data.strip()}\")\n+\n+# Example usage:\n+# caps_lock_status = True or False\n+# hour = 0 to 23\n+# minute = 0 to 59\n+caps_lock_status = True  # Replace with your logic\n+hour = 12  # Replace with your logic\n+minute = 34  # Replace with your logic\n+\n+send_data(caps_lock_status, hour, minute)\n+\n+# Close the serial connection\n+ser.close()\n"
                },
                {
                    "date": 1736979906903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,83 +1,55 @@\n import serial\n import os\n+import time\n \n # Find available USB ports\n # List available ports\n # Replace 'ttyUSB0' with the actual port if necessary\n ports = [f'/dev/{port}' for port in ['ttyUSB0', 'ttyUSB1', 'ttyACM0'] if os.path.exists(f'/dev/{port}')]\n-\n if ports:\n     ser = serial.Serial(ports[0], 115200)\n     print(f\"Connected to {ports[0]}\")\n else:\n     print(\"No USB device found\")\n+    exit()\n \n def send_data(caps_lock_status, hour, minute):\n     data = f\"{caps_lock_status},{hour},{minute}\\n\"\n     ser.write(data.encode())\n     print(f\"Sent: {data.strip()}\")\n \n-# Example usage:\n-# caps_lock_status = True or False\n-# hour = 0 to 23\n-# minute = 0 to 59\n-caps_lock_status = True  # Replace with your logic\n-hour = 12  # Replace with your logic\n-minute = 34  # Replace with your logic\n+# Initial values\n+caps_lock_status = False\n+hour = 12\n+minute = 34\n \n-send_data(caps_lock_status, hour, minute)\n-\n-# Close the serial connection\n-ser.close()\n-import serial\n-\n-# Find available USB ports\n-# List available ports\n-# Replace 'ttyUSB0' with the actual port if necessary\n-ports = [f'/dev/{port}' for port in ['ttyUSB0', 'ttyUSB1', 'ttyACM0'] if os.path.exists(f'/dev/{port}')]\n-\n-if ports:\n-    ser = serial.Serial(ports[0], 115200)\n-    print(f\"Connected to {ports[0]}\")\n-else:\n-    print(\"No USB device found\")\n-\n-def send_data(caps_lock_status, hour, minute):\n-    data = f\"{caps_lock_status},{hour},{minute}\\n\"\n-    ser.write(data.encode())\n-    print(f\"Sent: {data.strip()}\")\n-\n-# Example usage:\n-# caps_lock_status = True or False\n-# hour = 0 to 23\n-# minute = 0 to 59\n-caps_lock_status = True  # Replace with your logic\n-hour = 12  # Replace with your logic\n-minute = 34  # Replace with your logic\n-\n-send_data(caps_lock_status, hour, minute)\n-\n-# Close the serial connection\n-ser.close()\n-import serial\n-\n-# Replace 'COM_PORT' with your actual USB port\n-ser = serial.Serial('ttyACM0', 115200)\n-\n-def send_data(caps_lock_status, hour, minute):\n-    data = f\"{caps_lock_status},{hour},{minute}\\n\"\n-    ser.write(data.encode())\n-    print(f\"Sent: {data.strip()}\")\n-\n-# Example usage:\n-# caps_lock_status = True or False\n-# hour = 0 to 23\n-# minute = 0 to 59\n-caps_lock_status = True  # Replace with your logic\n-hour = 12  # Replace with your logic\n-minute = 34  # Replace with your logic\n-\n-send_data(caps_lock_status, hour, minute)\n-\n-# Close the serial connection\n-ser.close()\n+try:\n+    toggle_interval = 5  # Toggle caps_lock_status every 5 seconds\n+    last_toggle_time = time.time()\n+    \n+    while True:\n+        start_time = time.time()\n+        \n+        # Update caps_lock_status every toggle_interval seconds\n+        if time.time() - last_toggle_time >= toggle_interval:\n+            caps_lock_status = not caps_lock_status\n+            last_toggle_time = time.time()\n+        \n+        # Update hour and minute every minute\n+        current_time = time.localtime()\n+        hour = current_time.tm_hour\n+        minute = current_time.tm_min\n+        \n+        send_data(caps_lock_status, hour, minute)\n+        \n+        # Calculate the time taken to send the data\n+        elapsed_time = time.time() - start_time\n+        \n+        # Sleep for the remaining time to maintain 100 Hz (10 ms interval)\n+        sleep_time = max(0, 0.01 - elapsed_time)\n+        time.sleep(sleep_time)\n+except KeyboardInterrupt:\n+    print(\"Exiting...\")\n+finally:\n+    # Close the serial connection\n+    ser.close()\n\\ No newline at end of file\n"
                }
            ],
            "date": 1736973983020,
            "name": "Commit-0",
            "content": "import usb_hid\nfrom adafruit_hid.keyboard import Keyboard\nfrom adafruit_hid.keyboard_layout_us import KeyboardLayoutUS\nimport board\nimport busio\nimport time\n\n# Initialize USB HID components\ni2c = busio.I2C(board.SCL, board.SDA)\nkbd = Keyboard(usb_hid.devices)\nlayout = KeyboardLayoutUS(kbd)\n\ndef get_caps_lock_status():\n    # Keyboard LED states\n    return kbd.get_leds()\n\ndef get_current_time():\n    return time.strftime(\"%Y-%m-%d %H:%M:%S\")\n\nwhile True:\n    caps_lock_status = get_caps_lock_status()\n    is_caps_lock_on = bool(caps_lock_status & 0b001)  # Mask with 0b001 to check Caps Lock state\n    \n    # Get current time\n    current_time = get_current_time()\n    print(f\"Caps Lock: {is_caps_lock_on}, Time: {current_time}\")\n\n    # Send Caps Lock status and current time\n    if is_caps_lock_on:\n        kbd.press(KEY_CAPS_LOCK)\n    else:\n        kbd.release(KEY_CAPS_LOCK)\n\n    time.sleep(1)\n"
        }
    ]
}