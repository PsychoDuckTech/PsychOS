{
    "sourceFile": "include/tasks/knobHandler.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1737575020228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1737619228851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,7 +39,17 @@\n         {\n             Serial.println(\"Button long press detected.\");\n         }\n \n+        if (knob.checkButtonLongPress())\n+        {\n+            Serial.println(\"Button double press detected.\");\n+        }\n+\n+        if (knob.checkButtonLongPress())\n+        {\n+            Serial.println(\"Button triple press detected.\");\n+        }\n+\n         vTaskDelay(pdMS_TO_TICKS(POLLING_RATE_MS));\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1737619483562,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,27 +26,27 @@\n             msg.data = rotation;\n             xQueueSend(hostMessageQueue, &msg, 0); // Use 0 timeout\n         }\n \n-        if (knob.checkButtonPress())\n+        if (knob.checkSingleClick())\n         {\n             HostMessage msg;\n             msg.type = VOLUME_MUTE;\n             msg.data = 0;\n             xQueueSend(hostMessageQueue, &msg, 0);\n         }\n \n-        if (knob.checkButtonLongPress())\n+        if (knob.checkDoubleClick())\n         {\n             Serial.println(\"Button long press detected.\");\n         }\n \n-        if (knob.checkButtonLongPress())\n+        if (knob.checkDoubleClick())\n         {\n             Serial.println(\"Button double press detected.\");\n         }\n \n-        if (knob.checkButtonLongPress())\n+        if (knob.checkLongPress())\n         {\n             Serial.println(\"Button triple press detected.\");\n         }\n \n"
                },
                {
                    "date": 1737733127584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,55 +1,117 @@\n+#ifndef KY_040_H\n+#define KY_040_H\n+\n #include <Arduino.h>\n-#include \"config.h\"\n-#include \"drivers/rotaryEncoder/KY-040.h\"\n-#include \"hostCommunicationBridge.h\"\n \n-#define CLK_PIN 2\n-#define DT_PIN 36\n-#define SW_PIN 0\n-#define POLLING_RATE_MS 1 // 1 = 1000Hz, 2 = 500Hz\n+class KY040\n+{\n+private:\n+    const int _clkPin, _dtPin, _swPin;\n+    int _lastClk;\n+    int _lastDirection;\n+    unsigned long _lastDirectionTime;\n+    unsigned long _buttonPressStart;\n+    bool _buttonWasPressed;\n+    bool _longPressEventDetected;\n+    static const unsigned long DIRECTION_LOCK_TIME = 150; // ms\n+    static const unsigned long BUTTON_DEBOUNCE = 50;\n+    static const unsigned long LONG_PRESS_TIME = 1000; // ms\n \n-KY040 knob(CLK_PIN, DT_PIN, SW_PIN);\n+public:\n+    KY040(int clkPin, int dtPin, int swPin)\n+        : _clkPin(clkPin), _dtPin(dtPin), _swPin(swPin),\n+          _lastClk(0), _lastDirection(0), _lastDirectionTime(0),\n+          _buttonPressStart(0), _buttonWasPressed(false),\n+          _longPressEventDetected(false) {}\n \n-void knobHandler(void *parameters)\n-{\n-    knob.begin();\n-    Serial.println(task_knobHandler_started);\n+    void begin()\n+    {\n+        pinMode(_clkPin, INPUT);\n+        pinMode(_dtPin, INPUT);\n+        pinMode(_swPin, INPUT_PULLUP);\n+        _lastClk = digitalRead(_clkPin);\n+    }\n \n-    for (;;)\n+    int readEncoder()\n     {\n-        int rotation = knob.readEncoder();\n+        int currentClk = digitalRead(_clkPin);\n \n-        if (rotation != 0)\n+        if (currentClk != _lastClk)\n         {\n\\ No newline at end of file\n-            HostMessage msg;\n-            msg.type = VOLUME_CHANGE;\n-            msg.data = rotation;\n-            xQueueSend(hostMessageQueue, &msg, 0); // Use 0 timeout\n+            int dtValue = digitalRead(_dtPin);\n+            int direction = (currentClk == dtValue) ? -1 : 1;\n+            unsigned long currentTime = millis();\n+\n+            // If direction changed, check lock\n+            if (direction != _lastDirection)\n+            {\n+                // If previous direction was locked, block opposite\n+                if ((currentTime - _lastDirectionTime) < DIRECTION_LOCK_TIME)\n+                {\n+                    _lastClk = currentClk;\n+                    return 0;\n+                }\n+            }\n+\n+            _lastClk = currentClk;\n+            _lastDirection = direction;\n+            _lastDirectionTime = currentTime;\n+            return direction;\n         }\n+        return 0;\n+    }\n \n-        if (knob.checkSingleClick())\n+    bool checkButtonPress()\n+    {\n+        bool currentState = digitalRead(_swPin) == LOW;\n+        unsigned long currentTime = millis();\n+\n+        if (currentState && !_buttonWasPressed)\n         {\n-            HostMessage msg;\n-            msg.type = VOLUME_MUTE;\n-            msg.data = 0;\n-            xQueueSend(hostMessageQueue, &msg, 0);\n+            _buttonPressStart = currentTime;\n+            _buttonWasPressed = true;\n+            _longPressEventDetected = false; // Reset long press flag on new press\n+            return false;\n         }\n \n-        if (knob.checkDoubleClick())\n+        if (!currentState && _buttonWasPressed)\n         {\n-            Serial.println(\"Button long press detected.\");\n-        }\n+            unsigned long pressDuration = currentTime - _buttonPressStart;\n+            _buttonWasPressed = false;\n \n-        if (knob.checkDoubleClick())\n-        {\n-            Serial.println(\"Button double press detected.\");\n+            if (pressDuration >= BUTTON_DEBOUNCE)\n+            {\n+                if (pressDuration < LONG_PRESS_TIME)\n+                {\n+                    // Short press detected\n+                    return true;\n+                }\n+                else\n+                {\n+                    // Long press detected, mark for checkLongPress()\n+                    _longPressEventDetected = true;\n+                }\n+            }\n+            return false;\n         }\n \n-        if (knob.checkLongPress())\n+        return false;\n+    }\n+\n+    bool checkLongPress()\n+    {\n+        if (_longPressEventDetected)\n         {\n-            Serial.println(\"Button triple press detected.\");\n+            _longPressEventDetected = false;\n+            return true;\n         }\n+        return false;\n+    }\n \n-        vTaskDelay(pdMS_TO_TICKS(POLLING_RATE_MS));\n+    bool isButtonPressed()\n+    {\n+        return digitalRead(_swPin) == LOW;\n     }\n-}\n+};\n+\n+#endif\n\\ No newline at end of file\n"
                },
                {
                    "date": 1737733175191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,117 +1,45 @@\n-#ifndef KY_040_H\n-#define KY_040_H\n-\n #include <Arduino.h>\n+#include \"config.h\"\n+#include \"drivers/rotaryEncoder/KY-040.h\"\n+#include \"hostCommunicationBridge.h\"\n \n-class KY040\n-{\n-private:\n-    const int _clkPin, _dtPin, _swPin;\n-    int _lastClk;\n-    int _lastDirection;\n-    unsigned long _lastDirectionTime;\n-    unsigned long _buttonPressStart;\n-    bool _buttonWasPressed;\n-    bool _longPressEventDetected;\n-    static const unsigned long DIRECTION_LOCK_TIME = 150; // ms\n-    static const unsigned long BUTTON_DEBOUNCE = 50;\n-    static const unsigned long LONG_PRESS_TIME = 1000; // ms\n+#define CLK_PIN 2\n+#define DT_PIN 36\n+#define SW_PIN 0\n+#define POLLING_RATE_MS 1 // 1 = 1000Hz, 2 = 500Hz\n \n-public:\n-    KY040(int clkPin, int dtPin, int swPin)\n-        : _clkPin(clkPin), _dtPin(dtPin), _swPin(swPin),\n-          _lastClk(0), _lastDirection(0), _lastDirectionTime(0),\n-          _buttonPressStart(0), _buttonWasPressed(false),\n-          _longPressEventDetected(false) {}\n+KY040 knob(CLK_PIN, DT_PIN, SW_PIN);\n \n-    void begin()\n-    {\n-        pinMode(_clkPin, INPUT);\n-        pinMode(_dtPin, INPUT);\n-        pinMode(_swPin, INPUT_PULLUP);\n-        _lastClk = digitalRead(_clkPin);\n-    }\n+void knobHandler(void *parameters)\n+{\n+    knob.begin();\n+    Serial.println(task_knobHandler_started);\n \n-    int readEncoder()\n+    for (;;)\n     {\n-        int currentClk = digitalRead(_clkPin);\n+        int rotation = knob.readEncoder();\n \n-        if (currentClk != _lastClk)\n+        if (rotation != 0)\n         {\n-            int dtValue = digitalRead(_dtPin);\n-            int direction = (currentClk == dtValue) ? -1 : 1;\n-            unsigned long currentTime = millis();\n-\n-            // If direction changed, check lock\n-            if (direction != _lastDirection)\n-            {\n-                // If previous direction was locked, block opposite\n-                if ((currentTime - _lastDirectionTime) < DIRECTION_LOCK_TIME)\n-                {\n-                    _lastClk = currentClk;\n-                    return 0;\n-                }\n-            }\n-\n-            _lastClk = currentClk;\n-            _lastDirection = direction;\n-            _lastDirectionTime = currentTime;\n-            return direction;\n+            HostMessage msg;\n+            msg.type = VOLUME_CHANGE;\n+            msg.data = rotation;\n+            xQueueSend(hostMessageQueue, &msg, 0); // Use 0 timeout\n         }\n-        return 0;\n-    }\n \n-    bool checkButtonPress()\n-    {\n-        bool currentState = digitalRead(_swPin) == LOW;\n-        unsigned long currentTime = millis();\n-\n-        if (currentState && !_buttonWasPressed)\n+        if (knob.checkButtonPress())\n         {\n-            _buttonPressStart = currentTime;\n-            _buttonWasPressed = true;\n-            _longPressEventDetected = false; // Reset long press flag on new press\n-            return false;\n+            HostMessage msg;\n+            msg.type = VOLUME_MUTE;\n+            msg.data = 0;\n+            xQueueSend(hostMessageQueue, &msg, 0);\n         }\n \n-        if (!currentState && _buttonWasPressed)\n+        if (knob.checkLongPress())\n         {\n-            unsigned long pressDuration = currentTime - _buttonPressStart;\n-            _buttonWasPressed = false;\n-\n-            if (pressDuration >= BUTTON_DEBOUNCE)\n-            {\n-                if (pressDuration < LONG_PRESS_TIME)\n-                {\n-                    // Short press detected\n-                    return true;\n-                }\n-                else\n-                {\n-                    // Long press detected, mark for checkLongPress()\n-                    _longPressEventDetected = true;\n\\ No newline at end of file\n-                }\n-            }\n-            return false;\n+            Serial.println(\"Button triple press detected.\");\n         }\n \n-        return false;\n+        vTaskDelay(pdMS_TO_TICKS(POLLING_RATE_MS));\n     }\n-\n-    bool checkLongPress()\n-    {\n-        if (_longPressEventDetected)\n-        {\n-            _longPressEventDetected = false;\n-            return true;\n-        }\n-        return false;\n-    }\n-\n-    bool isButtonPressed()\n-    {\n-        return digitalRead(_swPin) == LOW;\n-    }\n-};\n-\n-#endif\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1737733306526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n #include <Arduino.h>\n #include \"config.h\"\n #include \"drivers/rotaryEncoder/KY-040.h\"\n #include \"hostCommunicationBridge.h\"\n+#include \"tasks/screenManager.h\"\n \n #define CLK_PIN 2\n #define DT_PIN 36\n #define SW_PIN 0\n@@ -36,9 +37,9 @@\n         }\n \n         if (knob.checkLongPress())\n         {\n-            Serial.println(\"Button triple press detected.\");\n+            switchScreen(SettingsScreen)\n         }\n \n         vTaskDelay(pdMS_TO_TICKS(POLLING_RATE_MS));\n     }\n"
                },
                {
                    "date": 1737733315808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n         }\n \n         if (knob.checkLongPress())\n         {\n-            switchScreen(SettingsScreen)\n+            switchScreen(SettingsScreen);\n         }\n \n         vTaskDelay(pdMS_TO_TICKS(POLLING_RATE_MS));\n     }\n"
                },
                {
                    "date": 1737734357276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,37 +10,61 @@\n #define POLLING_RATE_MS 1 // 1 = 1000Hz, 2 = 500Hz\n \n KY040 knob(CLK_PIN, DT_PIN, SW_PIN);\n \n-void knobHandler(void *parameters)\n-{\n+void knobHandler(void *parameters) {\n     knob.begin();\n-    Serial.println(task_knobHandler_started);\n+    Serial.println(\"Knob Handler started\");\n \n-    for (;;)\n-    {\n+    for(;;) {\n         int rotation = knob.readEncoder();\n+        bool longPress = knob.checkLongPress();\n+        bool shortPress = knob.checkButtonPress();\n \n-        if (rotation != 0)\n-        {\n-            HostMessage msg;\n-            msg.type = VOLUME_CHANGE;\n-            msg.data = rotation;\n-            xQueueSend(hostMessageQueue, &msg, 0); // Use 0 timeout\n+        if(currentScreen == SettingsScreen) {\n+            // Handle settings navigation\n+            if(rotation != 0) {\n+                settingsSelectedOption = (settingsSelectedOption + (rotation > 0 ? 1 : -1)) % 4;\n+                if(settingsSelectedOption < 0) settingsSelectedOption = 3;\n+                displaySettingsScreen(nullptr); // Refresh display\n+            }\n+\n+            if(shortPress) {\n+                // Handle submenu entry\n+                switch(settingsSelectedOption) {\n+                    case 0: switchScreen(ModulesSubmenu); break;\n+                    case 1: switchScreen(KeybindsSubmenu); break;\n\\ No newline at end of file\n+                    case 2: switchScreen(IntegrationsSubmenu); break;\n+                    case 3: switchScreen(RGBSubmenu); break;\n+                }\n+            }\n         }\n+        else if(currentScreen == MainScreen) {\n+            // Original volume handling\n+            if(rotation != 0) {\n+                HostMessage msg;\n+                msg.type = VOLUME_CHANGE;\n+                msg.data = rotation;\n+                xQueueSend(hostMessageQueue, &msg, 0);\n+            }\n \n-        if (knob.checkButtonPress())\n-        {\n-            HostMessage msg;\n-            msg.type = VOLUME_MUTE;\n-            msg.data = 0;\n-            xQueueSend(hostMessageQueue, &msg, 0);\n+            if(shortPress) {\n+                HostMessage msg;\n+                msg.type = VOLUME_MUTE;\n+                msg.data = 0;\n+                xQueueSend(hostMessageQueue, &msg, 0);\n+            }\n         }\n \n-        if (knob.checkLongPress())\n-        {\n-            switchScreen(SettingsScreen);\n+        // Long press handling\n+        if(longPress) {\n+            if(currentScreen == MainScreen) {\n+                switchScreen(SettingsScreen);\n+            }\n+            else {\n+                switchScreen(MainScreen);\n+            }\n         }\n \n         vTaskDelay(pdMS_TO_TICKS(POLLING_RATE_MS));\n     }\n-}\n+}\n"
                },
                {
                    "date": 1737735139489,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,19 +73,17 @@\n             }\n         }\n \n         // Long press handling\n-        if (longPress)\n-        {\n-            if (currentScreen == MainScreen)\n-            {\n-                switchScreen(SettingsScreen);\n-            }\n-            else\n-            {\n-                switchScreen(MainScreen);\n-            }\n-        }\n+        if(longPress) {\n+    if(menuStackIndex > 0) {\n+        menuStackIndex--;\n+        switchScreen(menuStack[menuStackIndex]);\n+    } else {\n+        switchScreen(MainScreen);\n+    }\n+}\n \n+\n         vTaskDelay(pdMS_TO_TICKS(POLLING_RATE_MS));\n     }\n }\n"
                },
                {
                    "date": 1737735607365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,16 +24,30 @@\n \n         if (currentScreen == SettingsScreen)\n         {\n             // Handle settings navigation\n-            if (rotation != 0)\n-            {\n-                settingsSelectedOption = (settingsSelectedOption + (rotation > 0 ? 1 : -1)) % 4;\n-                if (settingsSelectedOption < 0)\n-                    settingsSelectedOption = 3;\n-                displaySettingsScreen(nullptr); // Refresh display\n-            }\n+            if(rotation != 0) {\n+    switch(currentScreen) {\n+        case SettingsScreen:\n+            settingsSelectedOption = constrain(\n+                settingsSelectedOption + (rotation > 0 ? 1 : -1),\n+                0,\n+                3\n+            );\n+            break;\n+        case RGBSubmenu:\n+            settingsSelectedOption = constrain(\n+                settingsSelectedOption + (rotation > 0 ? 1 : -1),\n+                0,\n+                sizeof(rgbMenu)/sizeof(MenuItem)-1\n+            );\n+            break;\n+        // Add cases for other submenus\n+    }\n+    switchScreen(currentScreen); // Refresh display\n+}\n \n+\n             if (shortPress)\n             {\n                 // Handle submenu entry\n                 switch (settingsSelectedOption)\n"
                }
            ],
            "date": 1737575020228,
            "name": "Commit-0",
            "content": "#include <Arduino.h>\n#include \"config.h\"\n#include \"drivers/rotaryEncoder/KY-040.h\"\n#include \"hostCommunicationBridge.h\"\n\n#define CLK_PIN 2\n#define DT_PIN 36\n#define SW_PIN 0\n#define POLLING_RATE_MS 1 // 1 = 1000Hz, 2 = 500Hz\n\nKY040 knob(CLK_PIN, DT_PIN, SW_PIN);\n\nvoid knobHandler(void *parameters)\n{\n    knob.begin();\n    Serial.println(task_knobHandler_started);\n\n    for (;;)\n    {\n        int rotation = knob.readEncoder();\n\n        if (rotation != 0)\n        {\n            HostMessage msg;\n            msg.type = VOLUME_CHANGE;\n            msg.data = rotation;\n            xQueueSend(hostMessageQueue, &msg, 0); // Use 0 timeout\n        }\n\n        if (knob.checkButtonPress())\n        {\n            HostMessage msg;\n            msg.type = VOLUME_MUTE;\n            msg.data = 0;\n            xQueueSend(hostMessageQueue, &msg, 0);\n        }\n\n        if (knob.checkButtonLongPress())\n        {\n            Serial.println(\"Button long press detected.\");\n        }\n\n        vTaskDelay(pdMS_TO_TICKS(POLLING_RATE_MS));\n    }\n}"
        }
    ]
}