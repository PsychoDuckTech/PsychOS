{
    "sourceFile": "include/drivers/rotaryEncoder/KY-040.h",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1737573223030,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1737573247288,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n     unsigned long _buttonPressStart;\n     bool _buttonWasPressed;\n     static const unsigned long DIRECTION_LOCK_TIME = 150; // ms\n     static const unsigned long BUTTON_DEBOUNCE = 50;\n-    static const unsigned long LONG_PRESS_TIME = 1000; // ms\n+    static const unsigned long LONG_PRESS_TIME = 750; // ms\n \n public:\n     KY040(int clkPin, int dtPin, int swPin)\n         : _clkPin(clkPin), _dtPin(dtPin), _swPin(swPin),\n"
                },
                {
                    "date": 1737574300949,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,17 +11,18 @@\n     int _lastDirection;\n     unsigned long _lastDirectionTime;\n     unsigned long _buttonPressStart;\n     bool _buttonWasPressed;\n+    bool _longPressDetected;\n     static const unsigned long DIRECTION_LOCK_TIME = 150; // ms\n     static const unsigned long BUTTON_DEBOUNCE = 50;\n-    static const unsigned long LONG_PRESS_TIME = 750; // ms\n+    static const unsigned long LONG_PRESS_TIME = 1000; // ms\n \n public:\n     KY040(int clkPin, int dtPin, int swPin)\n         : _clkPin(clkPin), _dtPin(dtPin), _swPin(swPin),\n           _lastClk(0), _lastDirection(0), _lastDirectionTime(0),\n-          _buttonPressStart(0), _buttonWasPressed(false) {}\n+          _buttonPressStart(0), _buttonWasPressed(false), _longPressDetected(false) {}\n \n     void begin()\n     {\n         pinMode(_clkPin, INPUT);\n@@ -67,15 +68,16 @@\n         if (currentState && !_buttonWasPressed)\n         {\n             _buttonPressStart = currentTime;\n             _buttonWasPressed = true;\n+            _longPressDetected = false;\n             return false;\n         }\n \n         if (!currentState && _buttonWasPressed)\n         {\n             _buttonWasPressed = false;\n-            if ((currentTime - _buttonPressStart) > BUTTON_DEBOUNCE)\n+            if (!_longPressDetected && (currentTime - _buttonPressStart) > BUTTON_DEBOUNCE)\n             {\n                 return true;\n             }\n         }\n@@ -91,14 +93,16 @@\n         if (currentState && !_buttonWasPressed)\n         {\n             _buttonPressStart = currentTime;\n             _buttonWasPressed = true;\n+            _longPressDetected = false;\n         }\n \n         if (currentState && _buttonWasPressed)\n         {\n             if ((currentTime - _buttonPressStart) > LONG_PRESS_TIME)\n             {\n+                _longPressDetected = true;\n                 return true;\n             }\n         }\n \n"
                },
                {
                    "date": 1737574362185,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,18 +11,17 @@\n     int _lastDirection;\n     unsigned long _lastDirectionTime;\n     unsigned long _buttonPressStart;\n     bool _buttonWasPressed;\n-    bool _longPressDetected;\n     static const unsigned long DIRECTION_LOCK_TIME = 150; // ms\n     static const unsigned long BUTTON_DEBOUNCE = 50;\n-    static const unsigned long LONG_PRESS_TIME = 1000; // ms\n+    static const unsigned long LONG_PRESS_TIME = 750; // ms\n \n public:\n     KY040(int clkPin, int dtPin, int swPin)\n         : _clkPin(clkPin), _dtPin(dtPin), _swPin(swPin),\n           _lastClk(0), _lastDirection(0), _lastDirectionTime(0),\n-          _buttonPressStart(0), _buttonWasPressed(false), _longPressDetected(false) {}\n+          _buttonPressStart(0), _buttonWasPressed(false) {}\n \n     void begin()\n     {\n         pinMode(_clkPin, INPUT);\n@@ -68,16 +67,15 @@\n         if (currentState && !_buttonWasPressed)\n         {\n             _buttonPressStart = currentTime;\n             _buttonWasPressed = true;\n-            _longPressDetected = false;\n             return false;\n         }\n \n         if (!currentState && _buttonWasPressed)\n         {\n             _buttonWasPressed = false;\n-            if (!_longPressDetected && (currentTime - _buttonPressStart) > BUTTON_DEBOUNCE)\n+            if ((currentTime - _buttonPressStart) > BUTTON_DEBOUNCE)\n             {\n                 return true;\n             }\n         }\n@@ -93,16 +91,14 @@\n         if (currentState && !_buttonWasPressed)\n         {\n             _buttonPressStart = currentTime;\n             _buttonWasPressed = true;\n-            _longPressDetected = false;\n         }\n \n         if (currentState && _buttonWasPressed)\n         {\n             if ((currentTime - _buttonPressStart) > LONG_PRESS_TIME)\n             {\n-                _longPressDetected = true;\n                 return true;\n             }\n         }\n \n"
                },
                {
                    "date": 1737574368026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,8 @@\n     unsigned long _buttonPressStart;\n     bool _buttonWasPressed;\n     static const unsigned long DIRECTION_LOCK_TIME = 150; // ms\n     static const unsigned long BUTTON_DEBOUNCE = 50;\n-    static const unsigned long LONG_PRESS_TIME = 750; // ms\n \n public:\n     KY040(int clkPin, int dtPin, int swPin)\n         : _clkPin(clkPin), _dtPin(dtPin), _swPin(swPin),\n@@ -82,35 +81,8 @@\n \n         return false;\n     }\n \n-    bool checkLongPress()\n-    {\n-        bool currentState = digitalRead(_swPin) == LOW;\n-        unsigned long currentTime = millis();\n-\n-        if (currentState && !_buttonWasPressed)\n-        {\n-            _buttonPressStart = currentTime;\n-            _buttonWasPressed = true;\n-        }\n-\n-        if (currentState && _buttonWasPressed)\n-        {\n-            if ((currentTime - _buttonPressStart) > LONG_PRESS_TIME)\n-            {\n-                return true;\n-            }\n-        }\n-\n-        if (!currentState && _buttonWasPressed)\n-        {\n-            _buttonWasPressed = false;\n-        }\n-\n-        return false;\n-    }\n-\n     bool isButtonPressed()\n     {\n         return digitalRead(_swPin) == LOW;\n     }\n"
                },
                {
                    "date": 1737574756914,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,16 +11,19 @@\n     int _lastDirection;\n     unsigned long _lastDirectionTime;\n     unsigned long _buttonPressStart;\n     bool _buttonWasPressed;\n+    bool _longPressEventDetected;\n     static const unsigned long DIRECTION_LOCK_TIME = 150; // ms\n     static const unsigned long BUTTON_DEBOUNCE = 50;\n+    static const unsigned long LONG_PRESS_TIME = 1000; // ms\n \n public:\n     KY040(int clkPin, int dtPin, int swPin)\n         : _clkPin(clkPin), _dtPin(dtPin), _swPin(swPin),\n           _lastClk(0), _lastDirection(0), _lastDirectionTime(0),\n-          _buttonPressStart(0), _buttonWasPressed(false) {}\n+          _buttonPressStart(0), _buttonWasPressed(false),\n+          _longPressEventDetected(false) {}\n \n     void begin()\n     {\n         pinMode(_clkPin, INPUT);\n@@ -66,23 +69,46 @@\n         if (currentState && !_buttonWasPressed)\n         {\n             _buttonPressStart = currentTime;\n             _buttonWasPressed = true;\n+            _longPressEventDetected = false; // Reset long press flag on new press\n             return false;\n         }\n \n         if (!currentState && _buttonWasPressed)\n         {\n+            unsigned long pressDuration = currentTime - _buttonPressStart;\n             _buttonWasPressed = false;\n-            if ((currentTime - _buttonPressStart) > BUTTON_DEBOUNCE)\n+\n+            if (pressDuration >= BUTTON_DEBOUNCE)\n             {\n-                return true;\n+                if (pressDuration < LONG_PRESS_TIME)\n+                {\n+                    // Short press detected\n+                    return true;\n+                }\n+                else\n+                {\n+                    // Long press detected, mark for checkLongPress()\n+                    _longPressEventDetected = true;\n+                }\n             }\n+            return false;\n         }\n \n         return false;\n     }\n \n+    bool checkLongPress()\n+    {\n+        if (_longPressEventDetected)\n+        {\n+            _longPressEventDetected = false;\n+            return true;\n+        }\n+        return false;\n+    }\n+\n     bool isButtonPressed()\n     {\n         return digitalRead(_swPin) == LOW;\n     }\n"
                },
                {
                    "date": 1737574904964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     bool _buttonWasPressed;\n     bool _longPressEventDetected;\n     static const unsigned long DIRECTION_LOCK_TIME = 150; // ms\n     static const unsigned long BUTTON_DEBOUNCE = 50;\n-    static const unsigned long LONG_PRESS_TIME = 1000; // ms\n+    static const unsigned long LONG_PRESS_TIME = 750; // ms\n \n public:\n     KY040(int clkPin, int dtPin, int swPin)\n         : _clkPin(clkPin), _dtPin(dtPin), _swPin(swPin),\n@@ -102,8 +102,9 @@\n     {\n         if (_longPressEventDetected)\n         {\n             _longPressEventDetected = false;\n+            Serial.println(\"Long press detected\");\n             return true;\n         }\n         return false;\n     }\n"
                },
                {
                    "date": 1737574963069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,117 @@\n+#ifndef KY_040_H\n+#define KY_040_H\n+\n+#include <Arduino.h>\n+\n+class KY040\n+{\n+private:\n+    const int _clkPin, _dtPin, _swPin;\n+    int _lastClk;\n+    int _lastDirection;\n+    unsigned long _lastDirectionTime;\n+    unsigned long _buttonPressStart;\n+    bool _buttonWasPressed;\n+    bool _longPressEventDetected;\n+    static const unsigned long DIRECTION_LOCK_TIME = 150; // ms\n+    static const unsigned long BUTTON_DEBOUNCE = 50;\n+    static const unsigned long LONG_PRESS_TIME = 750; // ms\n+\n+public:\n+    KY040(int clkPin, int dtPin, int swPin)\n+        : _clkPin(clkPin), _dtPin(dtPin), _swPin(swPin),\n+          _lastClk(0), _lastDirection(0), _lastDirectionTime(0),\n+          _buttonPressStart(0), _buttonWasPressed(false),\n+          _longPressEventDetected(false) {}\n+\n+    void begin()\n+    {\n+        pinMode(_clkPin, INPUT);\n+        pinMode(_dtPin, INPUT);\n+        pinMode(_swPin, INPUT_PULLUP);\n+        _lastClk = digitalRead(_clkPin);\n+    }\n+\n+    int readEncoder()\n+    {\n+        int currentClk = digitalRead(_clkPin);\n+\n+        if (currentClk != _lastClk)\n+        {\n+            int dtValue = digitalRead(_dtPin);\n+            int direction = (currentClk == dtValue) ? -1 : 1;\n+            unsigned long currentTime = millis();\n+\n+            // If direction changed, check lock\n+            if (direction != _lastDirection)\n+            {\n+                // If previous direction was locked, block opposite\n+                if ((currentTime - _lastDirectionTime) < DIRECTION_LOCK_TIME)\n+                {\n+                    _lastClk = currentClk;\n+                    return 0;\n+                }\n+            }\n+\n+            _lastClk = currentClk;\n+            _lastDirection = direction;\n+            _lastDirectionTime = currentTime;\n+            return direction;\n+        }\n+        return 0;\n+    }\n+\n+    bool checkButtonPress()\n+    {\n+        bool currentState = digitalRead(_swPin) == LOW;\n+        unsigned long currentTime = millis();\n+\n+        if (currentState && !_buttonWasPressed)\n+        {\n+            _buttonPressStart = currentTime;\n+            _buttonWasPressed = true;\n+            _longPressEventDetected = false; // Reset long press flag on new press\n+            return false;\n+        }\n+\n+        if (!currentState && _buttonWasPressed)\n+        {\n+            unsigned long pressDuration = currentTime - _buttonPressStart;\n+            _buttonWasPressed = false;\n+\n+            if (pressDuration >= BUTTON_DEBOUNCE)\n+            {\n+                if (pressDuration < LONG_PRESS_TIME)\n+                {\n+                    // Short press detected\n+                    return true;\n+                }\n+                else\n+                {\n+                    // Long press detected, mark for checkLongPress()\n+                    _longPressEventDetected = true;\n+                }\n+            }\n+            return false;\n+        }\n+\n+        return false;\n+    }\n+\n+    bool checkLongPress()\n+    {\n+        if (_longPressEventDetected)\n+        {\n+            _longPressEventDetected = false;\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    bool isButtonPressed()\n+    {\n+        return digitalRead(_swPin) == LOW;\n+    }\n+};\n+\n+#endif\n\\ No newline at end of file\n"
                },
                {
                    "date": 1737574995974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,117 @@\n+#ifndef KY_040_H\n+#define KY_040_H\n+\n+#include <Arduino.h>\n+\n+class KY040\n+{\n+private:\n+    const int _clkPin, _dtPin, _swPin;\n+    int _lastClk;\n+    int _lastDirection;\n+    unsigned long _lastDirectionTime;\n+    unsigned long _buttonPressStart;\n+    bool _buttonWasPressed;\n+    bool _longPressEventDetected;\n+    static const unsigned long DIRECTION_LOCK_TIME = 150; // ms\n+    static const unsigned long BUTTON_DEBOUNCE = 50;\n+    static const unsigned long LONG_PRESS_TIME = 750; // ms\n+\n+public:\n+    KY040(int clkPin, int dtPin, int swPin)\n+        : _clkPin(clkPin), _dtPin(dtPin), _swPin(swPin),\n+          _lastClk(0), _lastDirection(0), _lastDirectionTime(0),\n+          _buttonPressStart(0), _buttonWasPressed(false),\n+          _longPressEventDetected(false) {}\n+\n+    void begin()\n+    {\n+        pinMode(_clkPin, INPUT);\n+        pinMode(_dtPin, INPUT);\n+        pinMode(_swPin, INPUT_PULLUP);\n+        _lastClk = digitalRead(_clkPin);\n+    }\n+\n+    int readEncoder()\n+    {\n+        int currentClk = digitalRead(_clkPin);\n+\n+        if (currentClk != _lastClk)\n+        {\n+            int dtValue = digitalRead(_dtPin);\n+            int direction = (currentClk == dtValue) ? -1 : 1;\n+            unsigned long currentTime = millis();\n+\n+            // If direction changed, check lock\n+            if (direction != _lastDirection)\n+            {\n+                // If previous direction was locked, block opposite\n+                if ((currentTime - _lastDirectionTime) < DIRECTION_LOCK_TIME)\n+                {\n+                    _lastClk = currentClk;\n+                    return 0;\n+                }\n+            }\n+\n+            _lastClk = currentClk;\n+            _lastDirection = direction;\n+            _lastDirectionTime = currentTime;\n+            return direction;\n+        }\n+        return 0;\n+    }\n+\n+    bool checkButtonPress()\n+    {\n+        bool currentState = digitalRead(_swPin) == LOW;\n+        unsigned long currentTime = millis();\n+\n+        if (currentState && !_buttonWasPressed)\n+        {\n+            _buttonPressStart = currentTime;\n+            _buttonWasPressed = true;\n+            _longPressEventDetected = false; // Reset long press flag on new press\n+            return false;\n+        }\n+\n+        if (!currentState && _buttonWasPressed)\n+        {\n+            unsigned long pressDuration = currentTime - _buttonPressStart;\n+            _buttonWasPressed = false;\n+\n+            if (pressDuration >= BUTTON_DEBOUNCE)\n+            {\n+                if (pressDuration < LONG_PRESS_TIME)\n+                {\n+                    // Short press detected\n+                    return true;\n+                }\n+                else\n+                {\n+                    // Long press detected, mark for checkLongPress()\n+                    _longPressEventDetected = true;\n+                }\n+            }\n+            return false;\n+        }\n+\n+        return false;\n+    }\n+\n+    bool checkButtonLongPress()\n+    {\n+        if (_longPressEventDetected)\n+        {\n+            _longPressEventDetected = false;\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    bool isButtonPressed()\n+    {\n+        return digitalRead(_swPin) == LOW;\n+    }\n+};\n+\n+#endif\n\\ No newline at end of file\n"
                },
                {
                    "date": 1737618854275,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,159 @@\n \n         return false;\n     }\n \n-    bool checkButtonLongPress()\n+    bool checkButtonLongPress()#ifndef KY_040_H\n+#define KY_040_H\n+\n+#include <Arduino.h>\n+\n+class KY040 \n+{\n+private:\n+    const int _clkPin, _dtPin, _swPin;\n+    int _lastClk;\n+    int _lastDirection;\n+    unsigned long _lastDirectionTime;\n+    unsigned long _buttonPressStart;\n+    bool _buttonWasPressed;\n+    bool _longPressEventDetected;\n+    \n+    int _clickCount;\n+    unsigned long _lastReleaseTime;\n+    bool _singleClickDetected;\n+    bool _doubleClickDetected;\n+    bool _tripleClickDetected;\n+\n+    // Timing constants\n+    static const unsigned long DIRECTION_LOCK_TIME = 150;  // ms\n+    static const unsigned long BUTTON_DEBOUNCE = 50;       // ms\n+    static const unsigned long LONG_PRESS_TIME = 1000;     // ms\n+    static const unsigned long MULTI_CLICK_TIMEOUT = 250;  // ms\n+\n+public:\n+    KY040(int clkPin, int dtPin, int swPin)\n+        : _clkPin(clkPin), _dtPin(dtPin), _swPin(swPin),\n+          _lastClk(0), _lastDirection(0), _lastDirectionTime(0),\n+          _buttonPressStart(0), _buttonWasPressed(false),\n+          _longPressEventDetected(false), _clickCount(0),\n+          _lastReleaseTime(0), _singleClickDetected(false),\n+          _doubleClickDetected(false), _tripleClickDetected(false) {}\n+\n+    void begin() {\n+        pinMode(_clkPin, INPUT);\n+        pinMode(_dtPin, INPUT);\n+        pinMode(_swPin, INPUT_PULLUP);\n+        _lastClk = digitalRead(_clkPin);\n+    }\n+\n+    int readEncoder() {\n+        int currentClk = digitalRead(_clkPin);\n+\n+        if (currentClk != _lastClk) {\n+            int dtValue = digitalRead(_dtPin);\n+            int direction = (currentClk == dtValue) ? -1 : 1;\n+            unsigned long currentTime = millis();\n+\n+            if (direction != _lastDirection) {\n+                if ((currentTime - _lastDirectionTime) < DIRECTION_LOCK_TIME) {\n+                    _lastClk = currentClk;\n+                    return 0;\n+                }\n+            }\n+\n+            _lastClk = currentClk;\n+            _lastDirection = direction;\n+            _lastDirectionTime = currentTime;\n+            return direction;\n+        }\n+        return 0;\n+    }\n+\n+    void checkButtonPress() {\n+        bool currentState = digitalRead(_swPin) == LOW;\n+        unsigned long currentTime = millis();\n+\n+        // Handle press start\n+        if (currentState && !_buttonWasPressed) {\n+            _buttonPressStart = currentTime;\n+            _buttonWasPressed = true;\n+            return;\n+        }\n+\n+        // Handle release\n+        if (!currentState && _buttonWasPressed) {\n+            unsigned long pressDuration = currentTime - _buttonPressStart;\n+            _buttonWasPressed = false;\n+\n+            if (pressDuration >= BUTTON_DEBOUNCE) {\n+                if (pressDuration < LONG_PRESS_TIME) {\n+                    // Valid short press - increment click counter\n+                    _clickCount++;\n+                    _lastReleaseTime = currentTime;\n+                } else {\n+                    // Long press detected\n+                    _longPressEventDetected = true;\n+                    _clickCount = 0;  // Cancel any click sequence\n+                }\n+            }\n+        }\n+\n+        // Check for multi-click timeout\n+        if (_clickCount > 0 && (currentTime - _lastReleaseTime) >= MULTI_CLICK_TIMEOUT) {\n+            // Determine click type based on count\n+            if (_clickCount == 1) {\n+                _singleClickDetected = true;\n+            } \n+            else if (_clickCount == 2) {\n+                _doubleClickDetected = true;\n+            } \n+            else if (_clickCount >= 3) {\n+                _tripleClickDetected = true;\n+            }\n+            \n+            _clickCount = 0;  // Reset counter\n+        }\n+    }\n+\n+    bool checkLongPress() {\n+        if (_longPressEventDetected) {\n+            _longPressEventDetected = false;\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    bool checkSingleClick() {\n+        if (_singleClickDetected) {\n+            _singleClickDetected = false;\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    bool checkDoubleClick() {\n+        if (_doubleClickDetected) {\n+            _doubleClickDetected = false;\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    bool checkTripleClick() {\n+        if (_tripleClickDetected) {\n+            _tripleClickDetected = false;\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    bool isButtonPressed() {\n+        return digitalRead(_swPin) == LOW;\n+    }\n+};\n+\n+#endif\n     {\n         if (_longPressEventDetected)\n         {\n             _longPressEventDetected = false;\n"
                },
                {
                    "date": 1737619443297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n #define KY_040_H\n \n #include <Arduino.h>\n \n-class KY040\n+class KY040 \n {\n private:\n     const int _clkPin, _dtPin, _swPin;\n     int _lastClk;\n@@ -12,43 +12,47 @@\n     unsigned long _lastDirectionTime;\n     unsigned long _buttonPressStart;\n     bool _buttonWasPressed;\n     bool _longPressEventDetected;\n-    static const unsigned long DIRECTION_LOCK_TIME = 150; // ms\n-    static const unsigned long BUTTON_DEBOUNCE = 50;\n-    static const unsigned long LONG_PRESS_TIME = 750; // ms\n+    \n+    int _clickCount;\n+    unsigned long _lastReleaseTime;\n+    bool _singleClickDetected;\n+    bool _doubleClickDetected;\n+    bool _tripleClickDetected;\n \n+    // Timing constants\n+    static const unsigned long DIRECTION_LOCK_TIME = 150;  // ms\n+    static const unsigned long BUTTON_DEBOUNCE = 50;       // ms\n+    static const unsigned long LONG_PRESS_TIME = 1000;     // ms\n+    static const unsigned long MULTI_CLICK_TIMEOUT = 250;  // ms\n+\n public:\n     KY040(int clkPin, int dtPin, int swPin)\n         : _clkPin(clkPin), _dtPin(dtPin), _swPin(swPin),\n           _lastClk(0), _lastDirection(0), _lastDirectionTime(0),\n           _buttonPressStart(0), _buttonWasPressed(false),\n-          _longPressEventDetected(false) {}\n+          _longPressEventDetected(false), _clickCount(0),\n+          _lastReleaseTime(0), _singleClickDetected(false),\n+          _doubleClickDetected(false), _tripleClickDetected(false) {}\n \n-    void begin()\n-    {\n+    void begin() {\n         pinMode(_clkPin, INPUT);\n         pinMode(_dtPin, INPUT);\n         pinMode(_swPin, INPUT_PULLUP);\n         _lastClk = digitalRead(_clkPin);\n     }\n \n-    int readEncoder()\n-    {\n+    int readEncoder() {\n         int currentClk = digitalRead(_clkPin);\n \n-        if (currentClk != _lastClk)\n-        {\n+        if (currentClk != _lastClk) {\n             int dtValue = digitalRead(_dtPin);\n             int direction = (currentClk == dtValue) ? -1 : 1;\n             unsigned long currentTime = millis();\n \n-            // If direction changed, check lock\n-            if (direction != _lastDirection)\n-            {\n-                // If previous direction was locked, block opposite\n-                if ((currentTime - _lastDirectionTime) < DIRECTION_LOCK_TIME)\n-                {\n+            if (direction != _lastDirection) {\n+                if ((currentTime - _lastDirectionTime) < DIRECTION_LOCK_TIME) {\n                     _lastClk = currentClk;\n                     return 0;\n                 }\n             }\n@@ -60,232 +64,87 @@\n         }\n         return 0;\n     }\n \n-    bool checkButtonPress()\n-    {\n+    void checkButtonPress() {\n         bool currentState = digitalRead(_swPin) == LOW;\n         unsigned long currentTime = millis();\n \n-        if (currentState && !_buttonWasPressed)\n-        {\n+        // Handle press start\n+        if (currentState && !_buttonWasPressed) {\n             _buttonPressStart = currentTime;\n             _buttonWasPressed = true;\n-            _longPressEventDetected = false; // Reset long press flag on new press\n-            return false;\n+            return;\n         }\n \n-        if (!currentState && _buttonWasPressed)\n-        {\n+        // Handle release\n+        if (!currentState && _buttonWasPressed) {\n             unsigned long pressDuration = currentTime - _buttonPressStart;\n             _buttonWasPressed = false;\n \n-            if (pressDuration >= BUTTON_DEBOUNCE)\n-            {\n-                if (pressDuration < LONG_PRESS_TIME)\n-                {\n-                    // Short press detected\n-                    return true;\n-                }\n-                else\n-                {\n-                    // Long press detected, mark for checkLongPress()\n+            if (pressDuration >= BUTTON_DEBOUNCE) {\n+                if (pressDuration < LONG_PRESS_TIME) {\n+                    // Valid short press - increment click counter\n+                    _clickCount++;\n+                    _lastReleaseTime = currentTime;\n+                } else {\n+                    // Long press detected\n                     _longPressEventDetected = true;\n+                    _clickCount = 0;  // Cancel any click sequence\n                 }\n             }\n-            return false;\n         }\n \n-        return false;\n-    }\n-\n-    bool checkButtonLongPress() #ifndef KY_040_H\n-#define KY_040_H\n-\n-#include <Arduino.h>\n-\n-        class KY040\n-    {\n-    private:\n-        const int _clkPin, _dtPin, _swPin;\n-        int _lastClk;\n-        int _lastDirection;\n-        unsigned long _lastDirectionTime;\n-        unsigned long _buttonPressStart;\n-        bool _buttonWasPressed;\n-        bool _longPressEventDetected;\n-\n-        int _clickCount;\n-        unsigned long _lastReleaseTime;\n-        bool _singleClickDetected;\n-        bool _doubleClickDetected;\n-        bool _tripleClickDetected;\n-\n-        // Timing constants\n-        static const unsigned long DIRECTION_LOCK_TIME = 150; // ms\n-        static const unsigned long BUTTON_DEBOUNCE = 50;      // ms\n-        static const unsigned long LONG_PRESS_TIME = 1000;    // ms\n-        static const unsigned long MULTI_CLICK_TIMEOUT = 250; // ms\n-\n-    public:\n-        KY040(int clkPin, int dtPin, int swPin)\n-            : _clkPin(clkPin), _dtPin(dtPin), _swPin(swPin),\n-              _lastClk(0), _lastDirection(0), _lastDirectionTime(0),\n-              _buttonPressStart(0), _buttonWasPressed(false),\n-              _longPressEventDetected(false), _clickCount(0),\n-              _lastReleaseTime(0), _singleClickDetected(false),\n-              _doubleClickDetected(false), _tripleClickDetected(false) {}\n-\n-        void begin()\n-        {\n-            pinMode(_clkPin, INPUT);\n-            pinMode(_dtPin, INPUT);\n-            pinMode(_swPin, INPUT_PULLUP);\n-            _lastClk = digitalRead(_clkPin);\n-        }\n-\n-        int readEncoder()\n-        {\n-            int currentClk = digitalRead(_clkPin);\n-\n-            if (currentClk != _lastClk)\n-            {\n-                int dtValue = digitalRead(_dtPin);\n-                int direction = (currentClk == dtValue) ? -1 : 1;\n-                unsigned long currentTime = millis();\n-\n-                if (direction != _lastDirection)\n-                {\n-                    if ((currentTime - _lastDirectionTime) < DIRECTION_LOCK_TIME)\n-                    {\n-                        _lastClk = currentClk;\n-                        return 0;\n-                    }\n-                }\n-\n-                _lastClk = currentClk;\n-                _lastDirection = direction;\n-                _lastDirectionTime = currentTime;\n-                return direction;\n+        // Check for multi-click timeout\n+        if (_clickCount > 0 && (currentTime - _lastReleaseTime) >= MULTI_CLICK_TIMEOUT) {\n+            // Determine click type based on count\n+            if (_clickCount == 1) {\n+                _singleClickDetected = true;\n+            } \n+            else if (_clickCount == 2) {\n+                _doubleClickDetected = true;\n+            } \n+            else if (_clickCount >= 3) {\n+                _tripleClickDetected = true;\n             }\n-            return 0;\n+            \n+            _clickCount = 0;  // Reset counter\n         }\n+    }\n \n-        void checkButtonPress()\n-        {\n-            bool currentState = digitalRead(_swPin) == LOW;\n-            unsigned long currentTime = millis();\n-\n-            // Handle press start\n-            if (currentState && !_buttonWasPressed)\n-            {\n-                _buttonPressStart = currentTime;\n-                _buttonWasPressed = true;\n-                return;\n-            }\n-\n-            // Handle release\n-            if (!currentState && _buttonWasPressed)\n-            {\n-                unsigned long pressDuration = currentTime - _buttonPressStart;\n-                _buttonWasPressed = false;\n-\n-                if (pressDuration >= BUTTON_DEBOUNCE)\n-                {\n-                    if (pressDuration < LONG_PRESS_TIME)\n-                    {\n-                        // Valid short press - increment click counter\n-                        _clickCount++;\n-                        _lastReleaseTime = currentTime;\n-                    }\n-                    else\n-                    {\n-                        // Long press detected\n-                        _longPressEventDetected = true;\n-                        _clickCount = 0; // Cancel any click sequence\n-                    }\n-                }\n-            }\n-\n-            // Check for multi-click timeout\n-            if (_clickCount > 0 && (currentTime - _lastReleaseTime) >= MULTI_CLICK_TIMEOUT)\n-            {\n-                // Determine click type based on count\n-                if (_clickCount == 1)\n-                {\n-                    _singleClickDetected = true;\n-                }\n-                else if (_clickCount == 2)\n-                {\n-                    _doubleClickDetected = true;\n-                }\n-                else if (_clickCount >= 3)\n-                {\n-                    _tripleClickDetected = true;\n-                }\n-\n-                _clickCount = 0; // Reset counter\n-            }\n+    bool checkLongPress() {\n+        if (_longPressEventDetected) {\n+            _longPressEventDetected = false;\n+            return true;\n         }\n+        return false;\n+    }\n \n-        bool checkLongPress()\n-        {\n-            if (_longPressEventDetected)\n-            {\n-                _longPressEventDetected = false;\n-                return true;\n-            }\n-            return false;\n+    bool checkSingleClick() {\n+        if (_singleClickDetected) {\n+            _singleClickDetected = false;\n+            return true;\n         }\n+        return false;\n+    }\n \n-        bool checkSingleClick()\n-        {\n-            if (_singleClickDetected)\n-            {\n-                _singleClickDetected = false;\n-                return true;\n-            }\n-            return false;\n+    bool checkDoubleClick() {\n+        if (_doubleClickDetected) {\n+            _doubleClickDetected = false;\n+            return true;\n         }\n+        return false;\n+    }\n \n-        bool checkDoubleClick()\n-        {\n-            if (_doubleClickDetected)\n-            {\n-                _doubleClickDetected = false;\n-                return true;\n-            }\n-            return false;\n-        }\n-\n-        bool checkTripleClick()\n-        {\n-            if (_tripleClickDetected)\n-            {\n-                _tripleClickDetected = false;\n-                return true;\n-            }\n-            return false;\n-        }\n-\n-        bool isButtonPressed()\n-        {\n-            return digitalRead(_swPin) == LOW;\n-        }\n-    };\n-\n-#endif\n-    {\n-        if (_longPressEventDetected)\n-        {\n-            _longPressEventDetected = false;\n+    bool checkTripleClick() {\n+        if (_tripleClickDetected) {\n+            _tripleClickDetected = false;\n             return true;\n         }\n         return false;\n     }\n \n-    bool isButtonPressed()\n-    {\n+    bool isButtonPressed() {\n         return digitalRead(_swPin) == LOW;\n     }\n };\n \n"
                },
                {
                    "date": 1737733139406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,29 +12,18 @@\n     unsigned long _lastDirectionTime;\n     unsigned long _buttonPressStart;\n     bool _buttonWasPressed;\n     bool _longPressEventDetected;\n-\n-    int _clickCount;\n-    unsigned long _lastReleaseTime;\n-    bool _singleClickDetected;\n-    bool _doubleClickDetected;\n-    bool _tripleClickDetected;\n-\n-    // Timing constants\n     static const unsigned long DIRECTION_LOCK_TIME = 150; // ms\n-    static const unsigned long BUTTON_DEBOUNCE = 50;      // ms\n-    static const unsigned long LONG_PRESS_TIME = 1000;    // ms\n-    static const unsigned long MULTI_CLICK_TIMEOUT = 250; // ms\n+    static const unsigned long BUTTON_DEBOUNCE = 50;\n+    static const unsigned long LONG_PRESS_TIME = 1000; // ms\n \n public:\n     KY040(int clkPin, int dtPin, int swPin)\n         : _clkPin(clkPin), _dtPin(dtPin), _swPin(swPin),\n           _lastClk(0), _lastDirection(0), _lastDirectionTime(0),\n           _buttonPressStart(0), _buttonWasPressed(false),\n-          _longPressEventDetected(false), _clickCount(0),\n-          _lastReleaseTime(0), _singleClickDetected(false),\n-          _doubleClickDetected(false), _tripleClickDetected(false) {}\n+          _longPressEventDetected(false) {}\n \n     void begin()\n     {\n         pinMode(_clkPin, INPUT);\n@@ -52,10 +41,12 @@\n             int dtValue = digitalRead(_dtPin);\n             int direction = (currentClk == dtValue) ? -1 : 1;\n             unsigned long currentTime = millis();\n \n+            // If direction changed, check lock\n             if (direction != _lastDirection)\n             {\n+                // If previous direction was locked, block opposite\n                 if ((currentTime - _lastDirectionTime) < DIRECTION_LOCK_TIME)\n                 {\n                     _lastClk = currentClk;\n                     return 0;\n@@ -69,22 +60,21 @@\n         }\n         return 0;\n     }\n \n-    void checkButtonPress()\n+    bool checkButtonPress()\n     {\n         bool currentState = digitalRead(_swPin) == LOW;\n         unsigned long currentTime = millis();\n \n-        // Handle press start\n         if (currentState && !_buttonWasPressed)\n         {\n             _buttonPressStart = currentTime;\n             _buttonWasPressed = true;\n-            return;\n+            _longPressEventDetected = false; // Reset long press flag on new press\n+            return false;\n         }\n \n-        // Handle release\n         if (!currentState && _buttonWasPressed)\n         {\n             unsigned long pressDuration = currentTime - _buttonPressStart;\n             _buttonWasPressed = false;\n@@ -92,40 +82,21 @@\n             if (pressDuration >= BUTTON_DEBOUNCE)\n             {\n                 if (pressDuration < LONG_PRESS_TIME)\n                 {\n-                    // Valid short press - increment click counter\n-                    _clickCount++;\n-                    _lastReleaseTime = currentTime;\n+                    // Short press detected\n+                    return true;\n                 }\n                 else\n                 {\n-                    // Long press detected\n+                    // Long press detected, mark for checkLongPress()\n                     _longPressEventDetected = true;\n-                    _clickCount = 0; // Cancel any click sequence\n                 }\n             }\n+            return false;\n         }\n \n-        // Check for multi-click timeout\n-        if (_clickCount > 0 && (currentTime - _lastReleaseTime) >= MULTI_CLICK_TIMEOUT)\n-        {\n-            // Determine click type based on count\n-            if (_clickCount == 1)\n-            {\n-                _singleClickDetected = true;\n-            }\n-            else if (_clickCount == 2)\n-            {\n-                _doubleClickDetected = true;\n-            }\n-            else if (_clickCount >= 3)\n-            {\n-                _tripleClickDetected = true;\n-            }\n-\n-            _clickCount = 0; // Reset counter\n-        }\n+        return false;\n     }\n \n     bool checkLongPress()\n     {\n@@ -136,38 +107,8 @@\n         }\n         return false;\n     }\n \n-    bool checkSingleClick()\n-    {\n-        if (_singleClickDetected)\n-        {\n-            _singleClickDetected = false;\n-            return true;\n-        }\n-        return false;\n-    }\n-\n-    bool checkDoubleClick()\n-    {\n-        if (_doubleClickDetected)\n-        {\n-            _doubleClickDetected = false;\n-            return true;\n-        }\n-        return false;\n-    }\n-\n-    bool checkTripleClick()\n-    {\n-        if (_tripleClickDetected)\n-        {\n-            _tripleClickDetected = false;\n-            return true;\n-        }\n-        return false;\n-    }\n-\n     bool isButtonPressed()\n     {\n         return digitalRead(_swPin) == LOW;\n     }\n"
                }
            ],
            "date": 1737573223030,
            "name": "Commit-0",
            "content": "#ifndef KY_040_H\n#define KY_040_H\n\n#include <Arduino.h>\n\nclass KY040\n{\nprivate:\n    const int _clkPin, _dtPin, _swPin;\n    int _lastClk;\n    int _lastDirection;\n    unsigned long _lastDirectionTime;\n    unsigned long _buttonPressStart;\n    bool _buttonWasPressed;\n    static const unsigned long DIRECTION_LOCK_TIME = 150; // ms\n    static const unsigned long BUTTON_DEBOUNCE = 50;\n    static const unsigned long LONG_PRESS_TIME = 1000; // ms\n\npublic:\n    KY040(int clkPin, int dtPin, int swPin)\n        : _clkPin(clkPin), _dtPin(dtPin), _swPin(swPin),\n          _lastClk(0), _lastDirection(0), _lastDirectionTime(0),\n          _buttonPressStart(0), _buttonWasPressed(false) {}\n\n    void begin()\n    {\n        pinMode(_clkPin, INPUT);\n        pinMode(_dtPin, INPUT);\n        pinMode(_swPin, INPUT_PULLUP);\n        _lastClk = digitalRead(_clkPin);\n    }\n\n    int readEncoder()\n    {\n        int currentClk = digitalRead(_clkPin);\n\n        if (currentClk != _lastClk)\n        {\n            int dtValue = digitalRead(_dtPin);\n            int direction = (currentClk == dtValue) ? -1 : 1;\n            unsigned long currentTime = millis();\n\n            // If direction changed, check lock\n            if (direction != _lastDirection)\n            {\n                // If previous direction was locked, block opposite\n                if ((currentTime - _lastDirectionTime) < DIRECTION_LOCK_TIME)\n                {\n                    _lastClk = currentClk;\n                    return 0;\n                }\n            }\n\n            _lastClk = currentClk;\n            _lastDirection = direction;\n            _lastDirectionTime = currentTime;\n            return direction;\n        }\n        return 0;\n    }\n\n    bool checkButtonPress()\n    {\n        bool currentState = digitalRead(_swPin) == LOW;\n        unsigned long currentTime = millis();\n\n        if (currentState && !_buttonWasPressed)\n        {\n            _buttonPressStart = currentTime;\n            _buttonWasPressed = true;\n            return false;\n        }\n\n        if (!currentState && _buttonWasPressed)\n        {\n            _buttonWasPressed = false;\n            if ((currentTime - _buttonPressStart) > BUTTON_DEBOUNCE)\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    bool checkLongPress()\n    {\n        bool currentState = digitalRead(_swPin) == LOW;\n        unsigned long currentTime = millis();\n\n        if (currentState && !_buttonWasPressed)\n        {\n            _buttonPressStart = currentTime;\n            _buttonWasPressed = true;\n        }\n\n        if (currentState && _buttonWasPressed)\n        {\n            if ((currentTime - _buttonPressStart) > LONG_PRESS_TIME)\n            {\n                return true;\n            }\n        }\n\n        if (!currentState && _buttonWasPressed)\n        {\n            _buttonWasPressed = false;\n        }\n\n        return false;\n    }\n\n    bool isButtonPressed()\n    {\n        return digitalRead(_swPin) == LOW;\n    }\n};\n\n#endif"
        }
    ]
}