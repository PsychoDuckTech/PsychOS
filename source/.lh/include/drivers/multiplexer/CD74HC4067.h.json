{
    "sourceFile": "include/drivers/multiplexer/CD74HC4067.h",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1736538935729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1736538977159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n     bool readChannel()\n     {\n         // return digitalRead(SIG_PIN); // Old method, same in speed as the new one\n         return (REG_READ(GPIO_IN_REG) >> SIG_PIN) & 0x1; // just looks cooler :)\n-        Serial.println(REG_READ(GPIO_IN_REG) >> SIG_PIN);\n+        Serial.println(\"read\");\n     }\n };\n \n #endif\n\\ No newline at end of file\n"
                },
                {
                    "date": 1736539057814,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,10 +45,10 @@\n     // Read the selected channel\n     bool readChannel()\n     {\n         // return digitalRead(SIG_PIN); // Old method, same in speed as the new one\n+        Serial.println(\"read\");\n         return (REG_READ(GPIO_IN_REG) >> SIG_PIN) & 0x1; // just looks cooler :)\n-        Serial.println(\"read\");\n     }\n };\n \n #endif\n\\ No newline at end of file\n"
                }
            ],
            "date": 1736538935729,
            "name": "Commit-0",
            "content": "#ifndef MULTIPLEXER_H\n#define MULTIPLEXER_H\n\n#include <Arduino.h>\n\nclass Multiplexer {\n    private: // Private variables (attributes)\n        const uint8_t S0_PIN;\n        const uint8_t S1_PIN;\n        const uint8_t S2_PIN;\n        const uint8_t S3_PIN;\n        const uint8_t SIG_PIN;\n\n    public: // Public methods (functions)\n        Multiplexer(uint8_t s0, uint8_t s1, uint8_t s2, uint8_t s3, uint8_t sig) \n            : S0_PIN(s0), S1_PIN(s1), S2_PIN(s2), S3_PIN(s3), SIG_PIN(sig) {\n            pinMode(S0_PIN, OUTPUT);\n            pinMode(S1_PIN, OUTPUT);\n            pinMode(S2_PIN, OUTPUT);\n            pinMode(S3_PIN, OUTPUT);\n            pinMode(SIG_PIN, INPUT_PULLUP);\n        }\n\n        // Select a channel (0-15)\n        void fastSelect(uint8_t channel) {\n            GPIO.out_w1tc = ((1ULL << S0_PIN) | (1ULL << S1_PIN) | (1ULL << S2_PIN) | (1ULL << S3_PIN));\n            GPIO.out_w1ts = (\n                ((channel & 0x01) ? (1ULL << S0_PIN) : 0) |\n                ((channel & 0x02) ? (1ULL << S1_PIN) : 0) |\n                ((channel & 0x04) ? (1ULL << S2_PIN) : 0) |\n                ((channel & 0x08) ? (1ULL << S3_PIN) : 0)\n            );\n        }\n\n        // Old method for selecting a channel, literally 1000 times slower than fastSelect\n        /*void selectChannel(uint8_t channel) {\n            digitalWrite(S0_PIN, channel & 0x01);\n            digitalWrite(S1_PIN, (channel >> 1) & 0x01);\n            digitalWrite(S2_PIN, (channel >> 2) & 0x01);\n            digitalWrite(S3_PIN, (channel >> 3) & 0x01);\n            delay(15); // Allow the multiplexer to stabilize, this is actually needed\n        }*/\n\n        // Read the selected channel\n        bool readChannel() {\n            //return digitalRead(SIG_PIN); // Old method, same in speed as the new one\n            return (REG_READ(GPIO_IN_REG) >> SIG_PIN) & 0x1; // just looks cooler :)\n            Serial.println(REG_READ(GPIO_IN_REG) >> SIG_PIN);\n        }\n};\n\n#endif"
        }
    ]
}